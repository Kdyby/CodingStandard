<?xml version="1.0"?>
<ruleset name="Kdyby">
    <description>Kdyby Coding Standard</description>

    <!-- run also for tests written with Nette/Tester -->
    <arg name="extensions" value="php,phpt"/>

    <!-- standardize tab width -->
    <arg name="tab-width" value="4"/>

    <!-- exclude tests temp dir (it's a mess) -->
    <exclude-pattern>*/tests/temp/*</exclude-pattern>
    <exclude-pattern>*/tests/tmp/*</exclude-pattern>

    <!-- include slevomat rules -->
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/ruleset.xml">
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousExceptionNaming.SuperfluousSuffix"/>
        <exclude name="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment"/>
        <exclude name="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment.MultiLinePropertyComment"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.ControlStructureSpacing.IncorrectLinesCountAfterControlStructure"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.ControlStructureSpacing.IncorrectLinesCountAfterLastControlStructure"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.ControlStructureSpacing.IncorrectLinesCountBeforeControlStructure"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowEmpty.DisallowedEmpty"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator.DisallowedShortTernaryOperator"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.EarlyExit.EarlyExitNotUsed"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses.UselessParentheses"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireMultiLineTernaryOperator.MultiLineTernaryOperatorNotUsed"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator.TernaryOperatorNotUsed"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison.RequiredYodaComparison"/>
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName"/>
        <exclude name="SlevomatCodingStandard.Functions.TrailingCommaInCall.MissingTrailingComma"/> <!-- low php version -->
        <exclude name="SlevomatCodingStandard.Functions.UnusedParameter.UnusedParameter"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants.NonFullyQualified"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions.NonFullyQualified"/>
        <exclude name="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators.DisallowedPostIncrementOperator"/>
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowArrayTypeHintSyntax.DisallowedArrayTypeHintSyntax"/>
        <exclude name="SlevomatCodingStandard.TypeHints.DisallowMixedTypeHint.DisallowedMixedTypeHint"/>
        <exclude name="SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingTraversablePropertyTypeHintSpecification"/>
        <exclude name="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly"/>
        <exclude name="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators.DisallowedPostDecrementOperator"/>
        <exclude name="SlevomatCodingStandard.Operators.DisallowIncrementAndDecrementOperators.DisallowedPreDecrementOperator"/>
        <exclude name="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators.PreDecrementOperatorNotUsedAsStandalone"/>
        <exclude name="SlevomatCodingStandard.Classes.SuperfluousAbstractClassNaming.SuperfluousPrefix"/>
    </rule>

    <!-- using UPPER_CASE NULL, TRUE, FALSE -->
    <rule ref="Generic.PHP.UpperCaseConstant"/>

    <rule ref="Squiz.Functions.FunctionDuplicateArgument" />

    <!-- using UPPER_CASE NULL, TRUE, FALSE -->
    <rule ref="Generic.PHP.BacktickOperator"/>
    <rule ref="Generic.Commenting.DocComment">
        <exclude name="Generic.Commenting.DocComment.ContentAfterOpen"/>
        <exclude name="Generic.Commenting.DocComment.ContentBeforeClose"/>
        <exclude name="Generic.Commenting.DocComment.MissingShort"/>
        <exclude name="Generic.Commenting.DocComment.NonParamGroup"/>
        <exclude name="Generic.Commenting.DocComment.ParamNotFirst"/>
        <exclude name="Generic.Commenting.DocComment.TagValueIndent"/>
    </rule>
    <rule ref="Squiz.Commenting.VariableComment">
        <exclude name="Squiz.Commenting.VariableComment.TagNotAllowed"/>
        <exclude name="Squiz.Commenting.VariableComment.VarOrder"/>
        <exclude name="Squiz.Commenting.VariableComment.IncorrectVarType"/>
    </rule>

    <!-- allow heredoc in tests -->
    <rule ref="Squiz.PHP.Heredoc">
        <exclude-pattern>*.phpt</exclude-pattern>
    </rule>

    <!-- ignore in tests -->
    <rule ref="PSR1.Files.SideEffects">
        <exclude-pattern>*.phpt</exclude-pattern>
        <exclude-pattern>*/tests/bootstrap.php</exclude-pattern>
        <exclude-pattern>*/tests/*/bootstrap.php</exclude-pattern>
    </rule>
    <!-- ignore in tests -->
    <rule ref="Squiz.Functions.GlobalFunction">
        <exclude-pattern>*.phpt</exclude-pattern>
        <exclude-pattern>*/tests/bootstrap.php</exclude-pattern>
        <exclude-pattern>*/tests/*/bootstrap.php</exclude-pattern>
    </rule>

    <rule ref="KdybyCodingStandard.Files.TypeNameMatchesFileName">
        <properties>
            <property name="extensions" type="array" value="php,phpt"/>
            <property name="skipDirs" type="array" value="
				data,
			"/>
        </properties>
    </rule>

    <rule ref="PSR1.Classes.ClassDeclaration.MultipleClasses">
        <!-- allow grouping of exceptions in one file -->
        <exclude-pattern>*/exceptions.php</exclude-pattern>
        <!-- useful for writing files with lot of stub classes -->
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>
    <rule ref="Squiz.Classes.ClassFileName.NoMatch">
        <!-- more exceptions in one file won't match -->
        <exclude-pattern>*/exceptions.php</exclude-pattern>
        <!-- useful for writing files with lot of stub classes -->
        <exclude-pattern>*/tests/*</exclude-pattern>
    </rule>

    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="0"/>
            <property name="error" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array" value="@author,@created,@version,@package,@copyright,@license"/>
        </properties>
    </rule>
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="1"/>
        </properties>
    </rule>
    <!--<rule ref="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace"/>-->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array" value="sizeof=>count,delete=>unset,print=>echo,is_null=>null,create_function=>null,var_dump=>null,dump=>null,print_r=>null"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.FunctionSpacing.After">
        <severity>5</severity> <!-- turned off by PSR2 -> turning on with default severity -->
    </rule>
    <!-- todo solve blank line at the beginning of class enforced by Squiz.WhiteSpace.MemberVarSpacing (https://github.com/squizlabs/PHP_CodeSniffer/issues/725) -->
    <!-- todo solve blank line at the beginning of class enforced by Squiz.WhiteSpace.FunctionSpacing (https://github.com/squizlabs/PHP_CodeSniffer/issues/652) -->
    <!-- todo solve blank line at the end of class enforced by Squiz.WhiteSpace.FunctionSpacing.After (https://github.com/consistence/coding-standard/issues/7) -->
</ruleset>
